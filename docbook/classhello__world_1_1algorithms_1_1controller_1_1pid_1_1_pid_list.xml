<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list" xml:lang="zh">
<title>hello_world::algorithms::controller::pid::PidList类 参考</title>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary></indexterm>
<para>

<para>一个用于存储 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> 的链表类，用于 Ozone 监视 </para>
 
</para>
<para>
<computeroutput>#include &lt;pid.hpp&gt;</computeroutput>
</para>
类 hello_world::algorithms::controller::pid::PidList 继承关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
hello_world::algorithms::controller::pid::PidList 的协作图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public 类型    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> * <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4c4c1b76f8b632d221ea20e93f55cac7">iterator</link></para>

<para>定义迭代器类型 </para>
</listitem>
            <listitem><para>typedef const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> * <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a1d2485619e4354fa8d5a3544bcf4b877">const_iterator</link></para>

<para>定义常量迭代器类型 </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public 成员函数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1acd0b93d9b41b68568bcfaa496f2b8e0b">PidList</link> ()</para>

<para>默认构造函数，初始化 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a8ad0d9ef13dc836eab3f26c1de2e87ec">~PidList</link> ()</para>

<para>析构函数，清空链表 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a82678264b9a57ef20f837874771fed9a">PidList</link> (const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> &amp;)=delete</para>

<para>禁止复制构造 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> &amp; <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a330534326e74b5ece9098a9c25a37a51">operator=</link> (const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> &amp;)=delete</para>

<para>禁止赋值操作 </para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a3b9df804e3d0bd9402c289727b00a25e">push</link> (const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid">BasicPid</link> &amp;obj)</para>

<para>向链表尾部添加一个新的 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> </para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1adc2b7b05bea0ffea750ed9a212467145">push</link> (const <link linkend="_structhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid_params">BasicPidParams</link> &amp;params)</para>

<para>向链表尾部添加一个新的 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> </para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a5ea468d831da1cfd880ad38897d227d2">removeTail</link> ()</para>

<para>移除链表尾部的 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> </para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1acff9c6256713181463dac33bcc8930a5">clear</link> ()</para>

<para>清空链表 </para>
</listitem>
            <listitem><para>bool <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a2d94d2bc545bc8d673f4de9592d647c1">empty</link> () const</para>

<para>检查链表是否为空 </para>
</listitem>
            <listitem><para>size_t <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a11a15045ece7e7259a71143875b2aa32">size</link> () const</para>

<para>获取链表的大小 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4c4c1b76f8b632d221ea20e93f55cac7">iterator</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a3f374c443b6a07e0df4e800c253643c9">begin</link> ()</para>

<para>获取链表的开始迭代器 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4c4c1b76f8b632d221ea20e93f55cac7">iterator</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a25c937a246eff76147e6f2c0cf5a0d86">end</link> ()</para>

<para>获取链表的结束迭代器 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a1d2485619e4354fa8d5a3544bcf4b877">const_iterator</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a6756a733783fa560b806f7d6cc9fb7da">begin</link> () const</para>

<para>获取链表的开始常量迭代器 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a1d2485619e4354fa8d5a3544bcf4b877">const_iterator</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a7b014801351059fe1d1c6d769f0b84b6">end</link> () const</para>

<para>获取链表的结束常量迭代器 </para>
</listitem>
        </itemizedlist>
</simplesect>
Public 成员函数 继承自 <link linkend="_classhello__world_1_1_mem_mang">hello_world::MemMang</link>        <itemizedlist>
            <listitem><para>void * <link linkend="_classhello__world_1_1_mem_mang_1abcf6e7289814e8da342ba4f47d8af411">operator new</link> (size_t size)</para>
</listitem>
            <listitem><para>void * <link linkend="_classhello__world_1_1_mem_mang_1ad10b6eff1541322708e5bde32c590c82">operator new[]</link> (size_t size)</para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1_mem_mang_1abf1fe21066f52d693e2eec63a5833e8e">operator delete</link> (void *ptr)</para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1_mem_mang_1a54e1a6a8e01b0996cc2854a8bc1ce7bd">operator delete[]</link> (void *ptr)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Private 属性    </title>
        <itemizedlist>
            <listitem><para>size_t <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1ab268cd237b3c6ad1b134d92d67b657d8">size_</link></para>

<para>链表的大小 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> * <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1af548c6769ca5c6239989fad85f203f6f">head_ptr_</link></para>

<para>链表的头指针 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> * <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4e49baca02d46d036fafef6413fd5179">tail_ptr_</link></para>

<para>链表的尾指针 </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>详细描述</title>

<para>一个用于存储 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> 的链表类，用于 Ozone 监视 </para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00237">237</link> 行定义.</para>
</section>
<section>
<title>成员类型定义说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a1d2485619e4354fa8d5a3544bcf4b877"/><section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>typedef const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link>* <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a1d2485619e4354fa8d5a3544bcf4b877">hello_world::algorithms::controller::pid::PidList::const_iterator</link></computeroutput></para><para>

<para>定义常量迭代器类型 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00241">241</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4c4c1b76f8b632d221ea20e93f55cac7"/><section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link>* <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4c4c1b76f8b632d221ea20e93f55cac7">hello_world::algorithms::controller::pid::PidList::iterator</link></computeroutput></para><para>

<para>定义迭代器类型 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00240">240</link> 行定义.</para>
</section>
</section>
<section>
<title>构造及析构函数说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1acd0b93d9b41b68568bcfaa496f2b8e0b"/><section>
    <title>PidList()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>PidList</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>PidList</secondary></indexterm>
<para><computeroutput>hello_world::algorithms::controller::pid::PidList::PidList ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>默认构造函数，初始化 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00246">246</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a8ad0d9ef13dc836eab3f26c1de2e87ec"/><section>
    <title>~PidList()</title>
<indexterm><primary>~PidList</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>~PidList</secondary></indexterm>
<para><computeroutput>hello_world::algorithms::controller::pid::PidList::~PidList ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>析构函数，清空链表 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00251">251</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a8ad0d9ef13dc836eab3f26c1de2e87ec_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a82678264b9a57ef20f837874771fed9a"/><section>
    <title>PidList()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>PidList</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>PidList</secondary></indexterm>
<para><computeroutput>hello_world::algorithms::controller::pid::PidList::PidList (const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>禁止复制构造 </para>
</para>
</section>
</section>
<section>
<title>成员函数说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a3f374c443b6a07e0df4e800c253643c9"/><section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4c4c1b76f8b632d221ea20e93f55cac7">iterator</link> hello_world::algorithms::controller::pid::PidList::begin ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>获取链表的开始迭代器 </para>
</para>

<para><formalpara><title>返回</title>

<para>链表的开始迭代器 </para>
</formalpara>
<caution><title>注意</title>

<para>当链表为空时，返回nullptr </para>
</caution>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00295">295</link> 行定义.</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a3f374c443b6a07e0df4e800c253643c9_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a6756a733783fa560b806f7d6cc9fb7da"/><section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a1d2485619e4354fa8d5a3544bcf4b877">const_iterator</link> hello_world::algorithms::controller::pid::PidList::begin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>获取链表的开始常量迭代器 </para>
</para>

<para><formalpara><title>返回</title>

<para>链表的开始常量迭代器 </para>
</formalpara>
<caution><title>注意</title>

<para>当链表为空时，返回nullptr </para>
</caution>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00309">309</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1acff9c6256713181463dac33bcc8930a5"/><section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void hello_world::algorithms::controller::pid::PidList::clear ( )</computeroutput></para><para>

<para>清空链表 </para>
</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00174">174</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_acff9c6256713181463dac33bcc8930a5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_acff9c6256713181463dac33bcc8930a5_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a2d94d2bc545bc8d673f4de9592d647c1"/><section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>empty</secondary></indexterm>
<para><computeroutput>bool hello_world::algorithms::controller::pid::PidList::empty ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>检查链表是否为空 </para>
</para>

<para><formalpara><title>返回</title>

<para>如果链表为空则返回 true，否则返回 false </para>
</formalpara>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00282">282</link> 行定义.</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a2d94d2bc545bc8d673f4de9592d647c1_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a25c937a246eff76147e6f2c0cf5a0d86"/><section>
    <title>end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4c4c1b76f8b632d221ea20e93f55cac7">iterator</link> hello_world::algorithms::controller::pid::PidList::end ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>获取链表的结束迭代器 </para>
</para>

<para><formalpara><title>返回</title>

<para>链表的结束迭代器 </para>
</formalpara>
<caution><title>注意</title>

<para>实际是nulllptr，仅供判断迭代结束使用 </para>
</caution>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00302">302</link> 行定义.</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a25c937a246eff76147e6f2c0cf5a0d86_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a7b014801351059fe1d1c6d769f0b84b6"/><section>
    <title>end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a1d2485619e4354fa8d5a3544bcf4b877">const_iterator</link> hello_world::algorithms::controller::pid::PidList::end ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>获取链表的结束常量迭代器 </para>
</para>

<para><formalpara><title>返回</title>

<para>链表的结束常量迭代器 </para>
</formalpara>
<caution><title>注意</title>

<para>实际是nulllptr，仅供判断迭代结束使用 </para>
</caution>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00316">316</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a330534326e74b5ece9098a9c25a37a51"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> &amp; hello_world::algorithms::controller::pid::PidList::operator= (const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>禁止赋值操作 </para>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a3b9df804e3d0bd9402c289727b00a25e"/><section>
    <title>push()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>push</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>push</secondary></indexterm>
<para><computeroutput>void hello_world::algorithms::controller::pid::PidList::push (const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid">BasicPid</link> &amp; obj)</computeroutput></para><para>

<para>向链表尾部添加一个新的 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>obj</entry><entry>
<para>要添加的 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid">BasicPid</link> 对象 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00139">139</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a3b9df804e3d0bd9402c289727b00a25e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a3b9df804e3d0bd9402c289727b00a25e_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1adc2b7b05bea0ffea750ed9a212467145"/><section>
    <title>push()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>push</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>push</secondary></indexterm>
<para><computeroutput>void hello_world::algorithms::controller::pid::PidList::push (const <link linkend="_structhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid_params">BasicPidParams</link> &amp; params)</computeroutput></para><para>

<para>向链表尾部添加一个新的 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>params</entry><entry>
<para>要添加的 <link linkend="_structhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid_params">BasicPidParams</link> 对象 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00140">140</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_adc2b7b05bea0ffea750ed9a212467145_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a5ea468d831da1cfd880ad38897d227d2"/><section>
    <title>removeTail()</title>
<indexterm><primary>removeTail</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>removeTail</secondary></indexterm>
<para><computeroutput>void hello_world::algorithms::controller::pid::PidList::removeTail ( )</computeroutput></para><para>

<para>移除链表尾部的 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link> </para>
</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00151">151</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a5ea468d831da1cfd880ad38897d227d2_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a5ea468d831da1cfd880ad38897d227d2_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a11a15045ece7e7259a71143875b2aa32"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>size</secondary></indexterm>
<para><computeroutput>size_t hello_world::algorithms::controller::pid::PidList::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>获取链表的大小 </para>
</para>

<para><formalpara><title>返回</title>

<para>链表的大小 </para>
</formalpara>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00288">288</link> 行定义.</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_a11a15045ece7e7259a71143875b2aa32_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>类成员变量说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1af548c6769ca5c6239989fad85f203f6f"/><section>
    <title>head_ptr_</title>
<indexterm><primary>head_ptr_</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>head_ptr_</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link>* hello_world::algorithms::controller::pid::PidList::head_ptr_<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>链表的头指针 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00320">320</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1ab268cd237b3c6ad1b134d92d67b657d8"/><section>
    <title>size_</title>
<indexterm><primary>size_</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>size_</secondary></indexterm>
<para><computeroutput>size_t hello_world::algorithms::controller::pid::PidList::size_<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>链表的大小 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00319">319</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list_1a4e49baca02d46d036fafef6413fd5179"/><section>
    <title>tail_ptr_</title>
<indexterm><primary>tail_ptr_</primary><secondary>hello_world::algorithms::controller::pid::PidList</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::PidList</primary><secondary>tail_ptr_</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_node">PidNode</link>* hello_world::algorithms::controller::pid::PidList::tail_ptr_<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>链表的尾指针 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00321">321</link> 行定义.</para>
</section>
</section>
</section>
