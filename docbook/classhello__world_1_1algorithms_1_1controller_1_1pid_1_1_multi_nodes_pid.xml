<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid" xml:lang="zh">
<title>hello_world::algorithms::controller::pid::MultiNodesPid类 参考</title>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary></indexterm>
<para>

<para>一个多节点 PID 控制器类，继承自 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller">Controller</link> 类，目前实现类型有串联或并联 </para>
 
</para>
<para>
<computeroutput>#include &lt;pid.hpp&gt;</computeroutput>
</para>
类 hello_world::algorithms::controller::pid::MultiNodesPid 继承关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
hello_world::algorithms::controller::pid::MultiNodesPid 的协作图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public 类型    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_structhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid_params">BasicPidParams</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1aa1dffa33b44dd44a17cc074900d7e058">Params</link></para>

<para>定义 Params 类型为 <computeroutput><link linkend="_structhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid_params">BasicPidParams</link></computeroutput> </para>
</listitem>
            <listitem><para>typedef <link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">MultiNodesPidType</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a1284a87ed9e883dafa07b53cc68513e5">Type</link></para>

<para>定义 Type 类型为 <computeroutput>MultiNodesPidType</computeroutput> </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public 成员函数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a8e4bfd26c1bb829f58d3fb14e80c4c0b">MultiNodesPid</link> (<link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">Type</link> type, <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_out_limit">OutLimit</link> out_limit, size_t count)</para>

<para>构造函数，初始化 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid">MultiNodesPid</link> 对象，至少会存在一个 PID 控制器节点，推荐和 <computeroutput>paramsAt</computeroutput> 函数一起使用 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a9a3282e6e51a5b7689717079f0d25abe">MultiNodesPid</link> (<link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">Type</link> type, <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_out_limit">OutLimit</link> out_limit, size_t count, const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1aa1dffa33b44dd44a17cc074900d7e058">Params</link> *params_arr)</para>

<para>构造函数，初始化 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid">MultiNodesPid</link> 对象，至少会存在一个 PID 控制器节点 </para>
</listitem>
            <listitem><para><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a5edb64efe535b8e5b8b1e30a91f28fe0">reset</link> () override</para>

<para>重置 PID 控制器 </para>
</listitem>
            <listitem><para><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1ae10478e0d731be3f6e6d0c479964d448">calc</link> (const float *ref_ls, const float *fdb_ls, const float *ffd_ls, float *out_ls) override</para>

<para>计算 PID 控制器的输出 </para>
</listitem>
            <listitem><para>size_t <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a02e66f815cbf9b95e4d390a456098850">size</link> () const</para>

<para>获取 PID 控制器的数量 </para>
</listitem>
            <listitem><para>float <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a9124ff9fabf43c21a73a294148697976">out</link> () const</para>

<para>获取 PID 控制器的输出 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1aa1dffa33b44dd44a17cc074900d7e058">Params</link> &amp; <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a5798e287814521e3627db78943c840c4">paramsAt</link> (size_t idx)</para>

<para>获取指定索引处 PID 控制器的参数 </para>
</listitem>
        </itemizedlist>
</simplesect>
Public 成员函数 继承自 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller">hello_world::algorithms::controller::Controller</link>        <itemizedlist>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a3fe01fdfc6fc3c17754757d7d0c4cfe9">Controller</link> (size_t ref_dim, size_t fdb_dim, size_t out_dim, size_t ffd_dim=0)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a392091ff03b5346cbbc3ffe14d4a6d83">~Controller</link> ()</para>
</listitem>
            <listitem><para>void * <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a5c856e2e4d553904a73fa8bf2b1d10f0">operator new</link> (size_t size)</para>
</listitem>
            <listitem><para>void * <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a097b88e2a82574df8d5a26eeee442525">operator new[]</link> (size_t size)</para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1aee97fc5e8af6420ec56ee5ed7fb1f3da">operator delete</link> (void *ptr)</para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1ad3d671169876c515fc7bf1c3be5f3b23">operator delete[]</link> (void *ptr)</para>
</listitem>
        </itemizedlist>
Public 成员函数 继承自 <link linkend="_classhello__world_1_1_mem_mang">hello_world::MemMang</link>        <itemizedlist>
            <listitem><para>void * <link linkend="_classhello__world_1_1_mem_mang_1abcf6e7289814e8da342ba4f47d8af411">operator new</link> (size_t size)</para>
</listitem>
            <listitem><para>void * <link linkend="_classhello__world_1_1_mem_mang_1ad10b6eff1541322708e5bde32c590c82">operator new[]</link> (size_t size)</para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1_mem_mang_1abf1fe21066f52d693e2eec63a5833e8e">operator delete</link> (void *ptr)</para>
</listitem>
            <listitem><para>void <link linkend="_classhello__world_1_1_mem_mang_1a54e1a6a8e01b0996cc2854a8bc1ce7bd">operator delete[]</link> (void *ptr)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Private 成员函数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1accc1fd43233ab6d228f7111eab364c51">cascade_calc</link> (const float *ref_ls, const float *fdb_ls, const float *ffd_ls, float *out_ls)</para>

<para>计算级联 PID 控制器的输出 </para>
</listitem>
            <listitem><para><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a180ce707d30cae5f45ec5820d1b2c50c">parallel_calc</link> (const float *ref_ls, const float *fdb_ls, const float *ffd_ls, float *out_ls)</para>

<para>计算并行 PID 控制器的输出 </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private 属性    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1ab06cc5de8b8e69bd63c1c19317afdede">pid_list_</link></para>

<para>PID 控制器列表 </para>
</listitem>
            <listitem><para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_out_limit">OutLimit</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a6ba0574fd4cea5a7babe59f5fb9c1d08">out_limit_</link></para>

<para>输出限制 </para>
</listitem>
            <listitem><para><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">Type</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a6e4f96a6abf9a261b9d5961b4352c78e">type_</link></para>

<para>PID 类型 </para>
</listitem>
            <listitem><para>float <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a46bcce0ae0037c45b1e5f2c88a957498">out_</link></para>

<para>PID 输出 </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>额外继承的成员函数    </title>
Protected 属性 继承自 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller">hello_world::algorithms::controller::Controller</link>        <itemizedlist>
            <listitem><para>size_t <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1aaef37bc2917097e1f3956d3e376ea64c">ref_dim_</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a18177bbaffdba8b34721e4c9256e6b8a">fdb_dim_</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a174ff1eec5dbf10f728c086b53504a6f">ffd_dim_</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1aac07a607fecba8eca0a3819ba86d40e2">out_dim_</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>详细描述</title>

<para>一个多节点 PID 控制器类，继承自 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller">Controller</link> 类，目前实现类型有串联或并联 </para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00338">338</link> 行定义.</para>
</section>
<section>
<title>成员类型定义说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1aa1dffa33b44dd44a17cc074900d7e058"/><section>
    <title>Params</title>
<indexterm><primary>Params</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>Params</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid_params">BasicPidParams</link> <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1aa1dffa33b44dd44a17cc074900d7e058">hello_world::algorithms::controller::pid::MultiNodesPid::Params</link></computeroutput></para><para>

<para>定义 Params 类型为 <computeroutput><link linkend="_structhello__world_1_1algorithms_1_1controller_1_1pid_1_1_basic_pid_params">BasicPidParams</link></computeroutput> </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00341">341</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a1284a87ed9e883dafa07b53cc68513e5"/><section>
    <title>Type</title>
<indexterm><primary>Type</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>Type</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">MultiNodesPidType</link> <link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">hello_world::algorithms::controller::pid::MultiNodesPid::Type</link></computeroutput></para><para>

<para>定义 Type 类型为 <computeroutput>MultiNodesPidType</computeroutput> </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00342">342</link> 行定义.</para>
</section>
</section>
<section>
<title>构造及析构函数说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a8e4bfd26c1bb829f58d3fb14e80c4c0b"/><section>
    <title>MultiNodesPid()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>MultiNodesPid</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>MultiNodesPid</secondary></indexterm>
<para><computeroutput>hello_world::algorithms::controller::pid::MultiNodesPid::MultiNodesPid (<link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">Type</link> type, <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_out_limit">OutLimit</link> out_limit, size_t count)</computeroutput></para><para>

<para>构造函数，初始化 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid">MultiNodesPid</link> 对象，至少会存在一个 PID 控制器节点，推荐和 <computeroutput>paramsAt</computeroutput> 函数一起使用 </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>PID 类型 </para>
</entry>
                            </row>
                            <row>
<entry>out_limit</entry><entry>
<para>输出限制 </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>PID 数量</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                如果 count 为 0，则将其设置为 1。 然后，根据 count 的值创建相应数量的 PID 控制器，并将它们添加到 pid_list_ 中。 反馈值维数为 PID 控制器节点的数量。 如果 type 为 kParallel，则将参考值维数与反馈值维数相同。 前馈值维数和输出值维数始终为 1。 <note><title>注解</title>

<para>如果需要修改 PID 参数，推荐使用 <computeroutput>paramsAt</computeroutput> 函数 </para>

<para>相较于初始化时确定参数更加安全、灵活，不必预先声明参数数组 </para>
</note>
</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00179">179</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a8e4bfd26c1bb829f58d3fb14e80c4c0b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a9a3282e6e51a5b7689717079f0d25abe"/><section>
    <title>MultiNodesPid()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>MultiNodesPid</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>MultiNodesPid</secondary></indexterm>
<para><computeroutput>hello_world::algorithms::controller::pid::MultiNodesPid::MultiNodesPid (<link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">Type</link> type, <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_out_limit">OutLimit</link> out_limit, size_t count, const <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1aa1dffa33b44dd44a17cc074900d7e058">Params</link> * params_arr)</computeroutput></para><para>

<para>构造函数，初始化 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid">MultiNodesPid</link> 对象，至少会存在一个 PID 控制器节点 </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>PID 类型 </para>
</entry>
                            </row>
                            <row>
<entry>out_limit</entry><entry>
<para>输出限制 </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>PID 数量 </para>
</entry>
                            </row>
                            <row>
<entry>params_arr</entry><entry>
<para>PID 参数数组</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                如果 count 为 0，则将其设置为 1。 如果 params_arr 为 nullptr，则使用默认参数创建 PID 控制器。 然后，根据 count 的值创建相应数量的 PID 控制器，并将它们添加到 pid_list_ 中。 反馈值维数为 PID 控制器节点的数量。 如果 type 为 kParallel，则将参考值维数与反馈值维数相同。 前馈值维数和输出值维数始终为 1。 <note><title>注解</title>

<para>如果需要修改 PID 参数，推荐使用 <computeroutput>paramsAt</computeroutput> 函数 </para>
</note>
</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00194">194</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a9a3282e6e51a5b7689717079f0d25abe_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>成员函数说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1ae10478e0d731be3f6e6d0c479964d448"/><section>
    <title>calc()</title>
<indexterm><primary>calc</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>calc</secondary></indexterm>
<para><computeroutput><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> hello_world::algorithms::controller::pid::MultiNodesPid::calc (const float * ref_ls, const float * fdb_ls, const float * ffd_ls, float * out_ls)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>计算 PID 控制器的输出 </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ref_ls</entry><entry>
<para>参考值数组 </para>
</entry>
                            </row>
                            <row>
<entry>fdb_ls</entry><entry>
<para>反馈值数组 </para>
</entry>
                            </row>
                            <row>
<entry>ffd_ls</entry><entry>
<para>前馈值数组 </para>
</entry>
                            </row>
                            <row>
<entry>out_ls</entry><entry>
<para>输出值数组 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>返回</title>

<para>表示计算过程是否正常的状态值 </para>
</formalpara>
<caution><title>注意</title>

<para>- 如果类型是 <computeroutput>kCascade</computeroutput>，则调用 <computeroutput>cascade_calc</computeroutput> 函数计算输出； </para>

<para>- 如果类型是 <computeroutput>kParallel</computeroutput>，则调用 <computeroutput>parallel_calc</computeroutput> 函数计算输出； </para>

<para>- 否则，返回错误状态 <computeroutput>kStateError</computeroutput> </para>
</caution>
<formalpara><title>参见</title>

<para><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">MultiNodesPidType</link> </para>

<para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1accc1fd43233ab6d228f7111eab364c51">cascade_calc(const float *ref_ls, const float *fdb_ls, const float *ffd_ls, float *out_ls)</link> </para>

<para><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a180ce707d30cae5f45ec5820d1b2c50c">parallel_calc(const float *ref_ls, const float *fdb_ls, const float *ffd_ls, float *out_ls)</link> </para>
</formalpara>
</para>
<para>
实现了 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a3a59379f79586c7d89f92b3b5f08bb57">hello_world::algorithms::controller::Controller</link>.</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00226">226</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_ae10478e0d731be3f6e6d0c479964d448_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1accc1fd43233ab6d228f7111eab364c51"/><section>
    <title>cascade_calc()</title>
<indexterm><primary>cascade_calc</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>cascade_calc</secondary></indexterm>
<para><computeroutput><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> hello_world::algorithms::controller::pid::MultiNodesPid::cascade_calc (const float * ref_ls, const float * fdb_ls, const float * ffd_ls, float * out_ls)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>计算级联 PID 控制器的输出 </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ref_ls</entry><entry>
<para>参考值数组，只使用第一个值，如果为nullptr则使用 <computeroutput>0</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>fdb_ls</entry><entry>
<para>反馈值数组，将使用等同于 <computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a02e66f815cbf9b95e4d390a456098850">size()</link></computeroutput> 个数的值，如果为 <computeroutput>nullptr</computeroutput> 将不会进行计算，且会将输出置零 </para>
</entry>
                            </row>
                            <row>
<entry>ffd_ls</entry><entry>
<para>前馈值数组，只使用第一个值，如果为 <computeroutput>nullptr</computeroutput> 则使用 <computeroutput>0</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>out_ls</entry><entry>
<para>输出值数组，只使用第一个值，为 <computeroutput>nullptr</computeroutput> 时输出传递失败 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>返回</title>

<para>表示计算过程是否正常的状态值 </para>
</formalpara>

                <formalpara>
                    <title>
返回值</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>kStateOk</entry><entry>
<para>计算成功且所有参数均不为 <computeroutput>nullptr</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>kStateError</entry><entry>
<para>有参数为 <computeroutput>nullptr</computeroutput>，计算成功与否视参数而定 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <caution><title>注意</title>

<para>- 当 <computeroutput>ref_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，使用 <computeroutput>0</computeroutput> 作为参考值 </para>

<para>- 当 <computeroutput>fdb_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，计算失败，并将输出置零 </para>

<para>- 当 <computeroutput>ffd_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，使用 <computeroutput>0</computeroutput> 作为前馈值 </para>

<para>- 当 <computeroutput>out_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，输出传递失败 </para>
</caution>
</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00250">250</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_accc1fd43233ab6d228f7111eab364c51_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_accc1fd43233ab6d228f7111eab364c51_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a9124ff9fabf43c21a73a294148697976"/><section>
    <title>out()</title>
<indexterm><primary>out</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>out</secondary></indexterm>
<para><computeroutput>float hello_world::algorithms::controller::pid::MultiNodesPid::out ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>获取 PID 控制器的输出 </para>
</para>

<para><formalpara><title>返回</title>

<para>PID 控制器的输出 </para>
</formalpara>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00411">411</link> 行定义.</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a9124ff9fabf43c21a73a294148697976_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a180ce707d30cae5f45ec5820d1b2c50c"/><section>
    <title>parallel_calc()</title>
<indexterm><primary>parallel_calc</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>parallel_calc</secondary></indexterm>
<para><computeroutput><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> hello_world::algorithms::controller::pid::MultiNodesPid::parallel_calc (const float * ref_ls, const float * fdb_ls, const float * ffd_ls, float * out_ls)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>计算并行 PID 控制器的输出 </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ref_ls</entry><entry>
<para>参考值数组，将使用等同于 <computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a02e66f815cbf9b95e4d390a456098850">size()</link></computeroutput> 个数的值，如果为 <computeroutput>nullptr</computeroutput> 将不会进行计算，且会将输出置零 </para>
</entry>
                            </row>
                            <row>
<entry>fdb_ls</entry><entry>
<para>反馈值数组，将使用等同于 <computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a02e66f815cbf9b95e4d390a456098850">size()</link></computeroutput> 个数的值，如果为 <computeroutput>nullptr</computeroutput> 将不会进行计算，且会将输出置零 </para>
</entry>
                            </row>
                            <row>
<entry>ffd_ls</entry><entry>
<para>前馈值数组，只使用第一个值，如果为 <computeroutput>nullptr</computeroutput> 则使用 <computeroutput>0</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>out_ls</entry><entry>
<para>输出值数组，只使用第一个值，为 <computeroutput>nullptr</computeroutput> 时输出传递失败 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>返回</title>

<para>表示计算过程是否正常的状态值 </para>
</formalpara>

                <formalpara>
                    <title>
返回值</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>kStateOk</entry><entry>
<para>计算成功且所有参数均不为 <computeroutput>nullptr</computeroutput> </para>
</entry>
                            </row>
                            <row>
<entry>kStateError</entry><entry>
<para>有参数为 <computeroutput>nullptr</computeroutput>，计算成功与否视参数而定 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <caution><title>注意</title>

<para>- 当 <computeroutput>ref_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，计算失败，并将输出置零 </para>

<para>- 当 <computeroutput>fdb_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，计算失败，并将输出置零 </para>

<para>- 当 <computeroutput>ffd_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，使用 0 作为前馈值 </para>

<para>- 当 <computeroutput>out_ls</computeroutput> 为 <computeroutput>nullptr</computeroutput> 时，输出传递失败 </para>
</caution>
</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00296">296</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a180ce707d30cae5f45ec5820d1b2c50c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a180ce707d30cae5f45ec5820d1b2c50c_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a5798e287814521e3627db78943c840c4"/><section>
    <title>paramsAt()</title>
<indexterm><primary>paramsAt</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>paramsAt</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1aa1dffa33b44dd44a17cc074900d7e058">MultiNodesPid::Params</link> &amp; hello_world::algorithms::controller::pid::MultiNodesPid::paramsAt (size_t idx)</computeroutput></para><para>

<para>获取指定索引处 PID 控制器的参数 </para>
</para>

<para>
                <formalpara>
                    <title>
参数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>idx</entry><entry>
<para>PID 控制器的索引 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>返回</title>

<para>指定索引处 PID 控制器的参数。如果索引超出 PID 控制器列表的范围，返回最后一个 PID 控制器的参数。 </para>
</formalpara>
</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00238">238</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a5798e287814521e3627db78943c840c4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a5edb64efe535b8e5b8b1e30a91f28fe0"/><section>
    <title>reset()</title>
<indexterm><primary>reset</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>reset</secondary></indexterm>
<para><computeroutput><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1a3651797f880533c49c9b90a0961c199d">State</link> hello_world::algorithms::controller::pid::MultiNodesPid::reset ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>重置 PID 控制器 </para>
</para>

<para><formalpara><title>返回</title>

<para>始终返回 kStateOk </para>
</formalpara>
</para>
<para>
实现了 <link linkend="_classhello__world_1_1algorithms_1_1controller_1_1_controller_1a1dfc2817c2e54de404466124a6ca4d19">hello_world::algorithms::controller::Controller</link>.</para>
<para>
在文件 <link linkend="_pid_8cpp_source">pid.cpp</link> 第 <link linkend="_pid_8cpp_source_1l00214">214</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a5edb64efe535b8e5b8b1e30a91f28fe0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a02e66f815cbf9b95e4d390a456098850"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>size</secondary></indexterm>
<para><computeroutput>size_t hello_world::algorithms::controller::pid::MultiNodesPid::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>获取 PID 控制器的数量 </para>
</para>

<para><formalpara><title>返回</title>

<para>PID 控制器的数量 </para>
</formalpara>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00405">405</link> 行定义.</para>
函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_a02e66f815cbf9b95e4d390a456098850_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>类成员变量说明</title>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a46bcce0ae0037c45b1e5f2c88a957498"/><section>
    <title>out_</title>
<indexterm><primary>out_</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>out_</secondary></indexterm>
<para><computeroutput>float hello_world::algorithms::controller::pid::MultiNodesPid::out_<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>PID 输出 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00424">424</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a6ba0574fd4cea5a7babe59f5fb9c1d08"/><section>
    <title>out_limit_</title>
<indexterm><primary>out_limit_</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>out_limit_</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_out_limit">OutLimit</link> hello_world::algorithms::controller::pid::MultiNodesPid::out_limit_<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>输出限制 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00422">422</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1ab06cc5de8b8e69bd63c1c19317afdede"/><section>
    <title>pid_list_</title>
<indexterm><primary>pid_list_</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>pid_list_</secondary></indexterm>
<para><computeroutput><link linkend="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_pid_list">PidList</link> hello_world::algorithms::controller::pid::MultiNodesPid::pid_list_<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>PID 控制器列表 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00421">421</link> 行定义.</para>
</section>
<anchor xml:id="_classhello__world_1_1algorithms_1_1controller_1_1pid_1_1_multi_nodes_pid_1a6e4f96a6abf9a261b9d5961b4352c78e"/><section>
    <title>type_</title>
<indexterm><primary>type_</primary><secondary>hello_world::algorithms::controller::pid::MultiNodesPid</secondary></indexterm>
<indexterm><primary>hello_world::algorithms::controller::pid::MultiNodesPid</primary><secondary>type_</secondary></indexterm>
<para><computeroutput><link linkend="_namespacehello__world_1_1algorithms_1_1controller_1_1pid_1ae7056f306e67c77cdcc0145836828ea5">Type</link> hello_world::algorithms::controller::pid::MultiNodesPid::type_<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>PID 类型 </para>
</para>
<para>
在文件 <link linkend="_pid_8hpp_source">pid.hpp</link> 第 <link linkend="_pid_8hpp_source_1l00423">423</link> 行定义.</para>
</section>
</section>
</section>
